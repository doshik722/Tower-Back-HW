package main

import (
	"fmt"
	"os"
	"os/signal"
	"strconv"
	"time"
)

// Я тут наворотила много всего лишнего, потому что подумала, что программа должна работать не только через терминал и принимать значение
// Ctrl+C и нормально завершаться в режиме дебаггера тоже, но принятие этого сигнала с режима дебаггера реализовать не смогла
// Мне сказали, что должно работать только с go run, а так оно работает, но то что тут наворотила все равно удалять не стала, ибо нахожу тут довольно
// занимательные конструкции для нормального, не аварийного заверения программы, которые заботают без паник, это уже вам на оценку
func main() {
	c := make(chan os.Signal, 1)
	signal.Notify(c)
	fmt.Println("Введите количество воркеров: ")
	var work int
	fmt.Scan(&work)

	numDann := 0
	chanel := make(chan string)
	flag := true //сигнал, что в мэйне данные записывать в канал больше НЕЛЬЗЯ

	for i := 0; i < work; i++ {
		go func(id int) {
			for {
				select {
				case <-c:

					flag = false

					fmt.Println("Программа завершена!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
					return
				case dann := <-chanel:
					fmt.Println(strconv.Itoa(id+1) + " воркер: " + dann)
					time.Sleep(1000000)

				}
			}
		}(i)
	}

	for flag { //делаем произвольные данные и заносим их в канал
		chanel <- ("Произвольные данные " + strconv.Itoa(numDann))
		numDann++

	}

}
